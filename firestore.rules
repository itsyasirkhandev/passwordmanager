/**
 * @fileoverview Firestore Security Rules for CipherVault.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. All data is nested under
 * /users/{userId}, ensuring that only the authenticated user can access their own
 * vaults and credentials.
 *
 * Data Structure:
 * The data is organized hierarchically: /users/{userId}/vaults/{vaultId}/credentials/{credentialId}.
 * This structure allows for simple, path-based authorization.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own vaults and credentials.
 * - Listing other users' data is explicitly denied.
 * - The rules explicitly deny any unauthorized access attempts.
 *
 * Denormalization for Authorization:
 * The `userId` is embedded in the path for both vaults and credentials, allowing
 * for direct ownership checks without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own document.
     *    Request: auth.uid = 'user123', resource.data.id = 'user123'
     * @deny (create) User with ID 'user123' cannot create a document with ID 'otherUser'.
     *    Reason: Mismatched user ID.
     * @allow (get) User with ID 'user123' can read their own document.
     * @allow (list) User with ID 'user123' can list their own documents.
     * @allow (update) User with ID 'user123' can update their own document.
     *    Request: auth.uid = 'user123', resource.data.id = 'user123', resource.data.email = 'newemail@example.com'
     * @deny (update) User with ID 'user123' cannot update a document with ID 'otherUser'.
     *    Reason: Mismatched user ID.
     * @allow (delete) User with ID 'user123' can delete their own document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for vaults.
     * @path /users/{userId}/vaults/{vaultId}
     * @allow (create) User with ID 'user123' can create a vault under their ID.
     *    Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user123' cannot create a vault under 'otherUser'.
     *    Reason: Mismatched user ID.
     * @allow (get) User with ID 'user123' can read a vault under their ID.
     * @allow (list) User with ID 'user123' can list vaults under their ID.
     * @allow (update) User with ID 'user123' can update a vault under their ID.
     * @deny (update) User with ID 'user123' cannot update a vault under 'otherUser'.
     *    Reason: Mismatched user ID.
     * @allow (delete) User with ID 'user123' can delete a vault under their ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/vaults/{vaultId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for credentials.
     * @path /users/{userId}/vaults/{vaultId}/credentials/{credentialId}
     * @allow (create) User with ID 'user123' can create a credential under their vault.
     *    Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user123' cannot create a credential under 'otherUser's vault.
     *    Reason: Mismatched user ID.
     * @allow (get) User with ID 'user123' can read a credential under their vault.
     * @allow (list) User with ID 'user123' can list credentials under their vault.
     * @allow (update) User with ID 'user123' can update a credential under their vault.
     * @deny (update) User with ID 'user123' cannot update a credential under 'otherUser's vault.
     *    Reason: Mismatched user ID.
     * @allow (delete) User with ID 'user123' can delete a credential under their vault.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/vaults/{vaultId}/credentials/{credentialId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}