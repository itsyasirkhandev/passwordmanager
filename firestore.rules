/**
 * @fileoverview Firestore Security Rules for CipherVault application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for vaults and credentials.
 * Each user has their own data tree, and only the authenticated user can access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership.
 * Vaults are stored in /users/{userId}/vaults/{vaultId}.
 * Credentials are stored in /users/{userId}/vaults/{vaultId}/credentials/{credentialId}.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - No listing of all users is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Secure access to user documents.  Only the authenticated user can read or write their own document.
     * @path: /users/{userId}
     * @allow: An authenticated user (create) with the correct userId.
     * @deny: An unauthenticated user (read, write).
     * @deny: An authenticated user (read, write) with an incorrect userId.
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description: Secure access to vaults. Only the owner can read, create, update, or delete vaults.
     * @path: /users/{userId}/vaults/{vaultId}
     * @allow: An authenticated user (create) a vault under their userId.
     * @allow: An authenticated user (read, update, delete) their own vault.
     * @deny: An unauthenticated user (read, write).
     * @deny: An authenticated user (read, write) someone else's vault.
     * @principle: Enforces path-based ownership for vaults.
     */
    match /users/{userId}/vaults/{vaultId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description: Secure access to credentials. Only the owner can read, create, update, or delete credentials.
     * @path: /users/{userId}/vaults/{vaultId}/credentials/{credentialId}
     * @allow: An authenticated user (create) a credential under their vault.
     * @allow: An authenticated user (read, update, delete) their own credential.
     * @deny: An unauthenticated user (read, write).
     * @deny: An authenticated user (read, write) someone else's credential.
     * @principle: Enforces path-based ownership for credentials.
     */
    match /users/{userId}/vaults/{vaultId}/credentials/{credentialId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}