rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines whether a user is the owner of a resource based on the `userId`.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Determines if a user is the existing owner of a document.
     *              This is used to prevent modification or deletion of non-existent documents.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Security rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User 'wbBytIZmmtOceyRTRMSORk7USc93' can create their own user document.
     * @allow (get) User 'wbBytIZmmtOceyRTRMSORk7USc93' can read their own user document.
     * @deny (create) User 'anotherUser' cannot create a document under /users/wbBytIZmmtOceyRTRMSORk7USc93.
     * @deny (update) User 'anotherUser' cannot update user 'wbBytIZmmtOceyRTRMSORk7USc93' data.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      allow delete: if isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Security rules for the /users/{userId}/vaults/{vaultId} collection.
     * @path /users/{userId}/vaults/{vaultId}
     * @allow (create) User 'wbBytIZmmtOceyRTRMSORk7USc93' can create a vault under their user document.
     * @allow (get) User 'wbBytIZmmtOceyRTRMSORk7USc93' can read a vault under their user document.
     * @deny (create) User 'anotherUser' cannot create a vault under /users/wbBytIZmmtOceyRTRMSORk7USc93.
     * @deny (update) User 'anotherUser' cannot update vault 'vault123' data in /users/wbBytIZmmtOceyRTRMSORk7USc93.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/vaults/{vaultId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/vaults/$(vaultId));
      allow delete: if isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/vaults/$(vaultId));
    }

    /**
     * @description Security rules for the /users/{userId}/vaults/{vaultId}/credentials/{credentialId} collection.
     * @path /users/{userId}/vaults/{vaultId}/credentials/{credentialId}
     * @allow (create) User 'wbBytIZmmtOceyRTRMSORk7USc93' can create a credential under their vault.
     * @allow (get) User 'wbBytIZmmtOceyRTRMSORk7USc93' can read a credential under their vault.
     * @deny (create) User 'anotherUser' cannot create a credential under /users/wbBytIZmmtOceyRTRMSORk7USc93/vaults/vault123.
     * @deny (update) User 'anotherUser' cannot update credential 'credential456' data in /users/wbBytIZmmtOceyRTRMSORk7USc93/vaults/vault123.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/vaults/{vaultId}/credentials/{credentialId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/vaults/$(vaultId)/credentials/$(credentialId));
      allow delete: if isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/vaults/$(vaultId)/credentials/$(credentialId));
    }

    /**
     * @description Security rules for the /users/{userId}/providers/{providerId} collection.
     * @path /users/{userId}/providers/{providerId}
     * @allow (create) User 'wbBytIZmmtOceyRTRMSORk7USc93' can create a provider under their user document.
     * @allow (get) User 'wbBytIZmmtOceyRTRMSORk7USc93' can read a provider under their user document.
     * @deny (create) User 'anotherUser' cannot create a provider under /users/wbBytIZmmtOceyRTRMSORk7USc93.
     * @deny (update) User 'anotherUser' cannot update provider 'provider789' data in /users/wbBytIZmmtOceyRTRMSORk7USc93.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/providers/{providerId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/providers/$(providerId));
      allow delete: if isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/providers/$(providerId));
    }
  }
}