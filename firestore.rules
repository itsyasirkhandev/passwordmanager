/**
 * @fileoverview Firestore Security Rules for CipherVault application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for vaults and credentials.
 * Each user has exclusive access to their data, achieved through path-based authorization.
 *
 * Data Structure:
 * The data is organized hierarchically under the `/users/{userId}` path:
 * - `/users/{userId}`: User documents
 * - `/users/{userId}/vaults/{vaultId}`: Vault documents belonging to the user.
 * - `/users/{userId}/vaults/{vaultId}/credentials/{credentialId}`: Credential documents within a vault.
 *
 * Key Security Decisions:
 * - **Strict Ownership**: Only the authenticated user can create, read, update, or delete data under their `/users/{userId}` path.
 * - **No User Listing**: Listing all user documents is disallowed to protect user privacy.
 * - **Path-Based Authorization**:  Authorization is derived from the Firestore path, eliminating the need for `get()` calls to check ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /users/{userId} document.  Allows a user to create their own document, but prevents others from reading or modifying it.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create /users/user123 document.
     * @deny (get, list, update, delete) - User with UID 'otherUser' cannot read /users/user123.
     * @principle Enforces document ownership for creation; prevents unauthorized access.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get, list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update, delete: if false;
    }

    /**
     * @description Secures the /users/{userId}/vaults/{vaultId} collection. Allows only the owner to create, read, update, or delete vaults within their own user path.
     * @path /users/{userId}/vaults/{vaultId}
     * @allow (create) - User with UID 'user123' can create a vault under /users/user123/vaults/vault123.
     * @allow (get, list) - User with UID 'user123' can read vault with ID vault123 from the  /users/user123/vaults/vault123 path
     * @deny (create, get, list, update, delete) - User with UID 'otherUser' cannot access vaults under /users/user123.
     * @principle Enforces path-based ownership for vaults.
     */
    match /users/{userId}/vaults/{vaultId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Secures the /users/{userId}/vaults/{vaultId}/credentials/{credentialId} collection. Allows only the owner to create, read, update, or delete credentials within their own vault path.
     * @path /users/{userId}/vaults/{vaultId}/credentials/{credentialId}
     * @allow (create) - User with UID 'user123' can create a credential under /users/user123/vaults/vault123/credentials/cred123.
     * @allow (get, list) - User with UID 'user123' can read credential with ID cred123 from the /users/user123/vaults/vault123/credentials/cred123 path.
     * @deny (create, get, list, update, delete) - User with UID 'otherUser' cannot access credentials under /users/user123/vaults/vault123.
     * @principle Enforces path-based ownership for credentials.
     */
    match /users/{userId}/vaults/{vaultId}/credentials/{credentialId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.vaultId == vaultId;
      allow update: if isOwner(userId) && resource.data.vaultId == vaultId;
      allow delete: if isOwner(userId) && resource.data.vaultId == vaultId;
    }
  }
}