/**
 * @fileoverview Firestore Security Rules for CipherVault.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model based on the document path.
 * The path /users/{userId} is the single source of truth for ownership.
 * We do not rely on data fields within the document for authorization.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, owned exclusively by the user.
 * - /users/{userId}/vaults/{vaultId}: Stores password vaults, owned exclusively by the user.
 * - /users/{userId}/vaults/{vaultId}/credentials/{credentialId}: Stores individual credentials within a vault, owned exclusively by the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All data is private and requires authentication.
 * - Data consistency between path and document data is enforced on creation and updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource based on the userId.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     *              This is used for update and delete operations to prevent acting on non-existent documents.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (get, list) User 'A' can read their own profile.
     * @allow (create) User 'A' can create their own profile if the user ID in the data matches the path.
     * @allow (update, delete) User 'A' can update or delete their own profile.
     * @deny (get, list) User 'A' cannot read User 'B' profile.
     * @deny (create) User 'A' cannot create User 'B' profile.
     * @deny (update, delete) User 'A' cannot update or delete User 'B' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for vaults under a user.
     * @path /users/{userId}/vaults/{vaultId}
     * @allow (get, list) User 'A' can read their own vaults.
     * @allow (create) User 'A' can create a vault under their user ID if the userId in the data matches the path.
     * @allow (update, delete) User 'A' can update or delete their own vaults.
     * @deny (get, list) User 'A' cannot read User 'B' vaults.
     * @deny (create) User 'A' cannot create vaults under User 'B'.
     * @deny (update, delete) User 'A' cannot update or delete User 'B' vaults.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/vaults/{vaultId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for credentials within vaults.
     * @path /users/{userId}/vaults/{vaultId}/credentials/{credentialId}
     * @allow (get, list) User 'A' can read their own credentials within their vaults.
     * @allow (create) User 'A' can create a credential within their vault if the vaultId in the data matches the path.
     * @allow (update, delete) User 'A' can update or delete their own credentials.
     * @deny (get, list) User 'A' cannot read User 'B' credentials.
     * @deny (create) User 'A' cannot create credentials under User 'B' vaults.
     * @deny (update, delete) User 'A' cannot update or delete User 'B' credentials.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/vaults/{vaultId}/credentials/{credentialId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.vaultId == vaultId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}