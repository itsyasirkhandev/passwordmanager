/**
 * @fileoverview Firestore Security Rules for CipherVault.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Only the authenticated user can access their own data, which includes vaults and credentials.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring that all documents are owned by the user identified by {userId}.  Vaults are stored in /users/{userId}/vaults/{vaultId}, and credentials are stored in /users/{userId}/vaults/{vaultId}/credentials/{credentialId}.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Only authenticated users can access their data.
 * - Data consistency between the path and the document's internal fields is enforced.
 *
 * Denormalization for Authorization:
 * The Firestore structure itself denormalizes authorization data.  The nesting of vaults and credentials under the user's document avoids the need for `get()` calls to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users. Only allows access to a specific user's document.
     * @path /users/{userId}
     * @allow (get) User with matching UID can read their profile.
     * @deny (list) No one can list all users.
     * @principle Enforces document ownership and prevents unauthorized listing.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages user vaults. Only the vault owner can create, read, update, and delete vaults.
     * @path /users/{userId}/vaults/{vaultId}
     * @allow (create) User with matching UID can create a vault with the vaultId.
     * @allow (get) User with matching UID can read their vault.
     * @deny (update) User cannot update vault if not the owner.
     * @principle Enforces document ownership for vault data.
     */
    match /users/{userId}/vaults/{vaultId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages user credentials within a vault. Only the credential owner can create, read, update, and delete credentials.
     * @path /users/{userId}/vaults/{vaultId}/credentials/{credentialId}
     * @allow (create) User with matching UID can create a credential with the credentialId.
     * @allow (get) User with matching UID can read their credential.
     * @deny (update) User cannot update credential if not the owner.
     * @principle Enforces document ownership for credential data.
     */
    match /users/{userId}/vaults/{vaultId}/credentials/{credentialId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
    }
  }
}