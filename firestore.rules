/**
 * @fileoverview Firestore Security Rules for CipherVault.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has exclusive
 * access to their own data, including vaults and credentials. No cross-user
 * access is permitted.
 *
 * Data Structure:
 * The data is organized hierarchically under /users/{userId}, ensuring clear
 * ownership and preventing unauthorized data access. Each user contains vaults,
 * and each vault contains credentials.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent enumeration.
 * - All write operations are validated to ensure the authenticated user owns
 *   the data being modified.
 * - These rules leverage path-based ownership, where the document path itself
 *   determines authorization, simplifying the rules and improving performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users collection. Only the user themselves can read or write their own document.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own user document.
     * @deny (create) User with ID 'user456' cannot create a document under 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/vaults collection. Only the owner can read and write vaults.
     * @path /users/{userId}/vaults/{vaultId}
     * @allow (create) User with ID 'user123' can create a vault under their user document.
     * @deny (update) User with ID 'user456' cannot update a vault under 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/vaults/{vaultId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/vaults/{vaultId}/credentials collection. Only the owner can read and write credentials.
     * @path /users/{userId}/vaults/{vaultId}/credentials/{credentialId}
     * @allow (create) User with ID 'user123' can create a credential under their vault.
     * @deny (update) User with ID 'user456' cannot update a credential under 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/vaults/{vaultId}/credentials/{credentialId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}