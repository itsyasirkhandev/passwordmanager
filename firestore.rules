/**
 * @fileoverview Firestore Security Rules for CipherVault.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. All data is nested under
 * /users/{userId}, and only the authenticated user can access their own data.
 *
 * Data Structure:
 * The data model follows a hierarchical structure:
 * /users/{userId} - User profiles
 * /users/{userId}/vaults/{vaultId} - Password vaults owned by the user
 * /users/{userId}/vaults/{vaultId}/credentials/{credentialId} - Credentials within a vault
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Path-based ownership is strictly enforced. Every document is owned by the user whose ID is in the path.
 * - Data validation is relaxed to allow for rapid prototyping, focusing only on authorization-critical fields.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own user document.
     *    Request: { "auth": { "uid": "user123" }, "method": "create", "path": "/databases/(default)/documents/users/user123", "resource": { "data": { "id": "user123", "email": "test@example.com" } } }
     * @deny (create) User with ID 'user123' cannot create a user document with a mismatched ID 'user456'.
     *    Request: { "auth": { "uid": "user123" }, "method": "create", "path": "/databases/(default)/documents/users/user456", "resource": { "data": { "id": "user456", "email": "test@example.com" } } }
     * @deny (get) Any user cannot get a user document if not authenticated
     *    Request: { "auth": null, "method": "get", "path": "/databases/(default)/documents/users/user123" }
     * @deny (update) Any user cannot update a user document if not the owner
     *    Request: { "auth": { "uid": "user456" }, "method": "update", "path": "/databases/(default)/documents/users/user123", "resource": { "data": { "id": "user123", "email": "new@example.com" } } }
     * @deny (delete) Any user cannot delete a user document if not the owner
     *    Request: { "auth": { "uid": "user456" }, "method": "delete", "path": "/databases/(default)/documents/users/user123" }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/vaults/{vaultId} collection.
     * @path /users/{userId}/vaults/{vaultId}
     * @allow (create) User with ID 'user123' can create a vault document under their user ID.
     *    Request: { "auth": { "uid": "user123" }, "method": "create", "path": "/databases/(default)/documents/users/user123/vaults/vault456", "resource": { "data": { "userId": "user123", "vaultName": "My Vault" } } }
     * @deny (create) User with ID 'user123' cannot create a vault document under another user's ID 'user456'.
     *    Request: { "auth": { "uid": "user123" }, "method": "create", "path": "/databases/(default)/documents/users/user456/vaults/vault456", "resource": { "data": { "userId": "user456", "vaultName": "My Vault" } } }
     * @deny (get) Any unauthenticated user cannot get a vault document
     *    Request: { "auth": null, "method": "get", "path": "/databases/(default)/documents/users/user123/vaults/vault456" }
     * @deny (update) Any user cannot update a vault document if not the owner
     *    Request: { "auth": { "uid": "user456" }, "method": "update", "path": "/databases/(default)/documents/users/user123/vaults/vault456", "resource": { "data": { "userId": "user123", "vaultName": "New Vault Name" } } }
     * @deny (delete) Any user cannot delete a vault document if not the owner
     *    Request: { "auth": { "uid": "user456" }, "method": "delete", "path": "/databases/(default)/documents/users/user123/vaults/vault456" }
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/vaults/{vaultId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/vaults/{vaultId}/credentials/{credentialId} collection.
     * @path /users/{userId}/vaults/{vaultId}/credentials/{credentialId}
     * @allow (create) User with ID 'user123' can create a credential document under their user ID and vault ID.
     *    Request: { "auth": { "uid": "user123" }, "method": "create", "path": "/databases/(default)/documents/users/user123/vaults/vault456/credentials/cred789", "resource": { "data": { "vaultId": "vault456", "serviceName": "Example Service", "username": "testuser" } } }
     * @deny (create) User with ID 'user123' cannot create a credential document under another user's ID 'user456'.
     *    Request: { "auth": { "uid": "user123" }, "method": "create", "path": "/databases/(default)/documents/users/user456/vaults/vault456/credentials/cred789", "resource": { "data": { "vaultId": "vault456", "serviceName": "Example Service", "username": "testuser" } } }
     * @deny (get) Any unauthenticated user cannot get a credential document
     *    Request: { "auth": null, "method": "get", "path": "/databases/(default)/documents/users/user123/vaults/vault456/credentials/cred789" }
     * @deny (update) Any user cannot update a credential document if not the owner
     *    Request: { "auth": { "uid": "user456" }, "method": "update", "path": "/databases/(default)/documents/users/user123/vaults/vault456/credentials/cred789", "resource": { "data": { "vaultId": "vault456", "serviceName": "New Service Name", "username": "testuser" } } }
     * @deny (delete) Any user cannot delete a credential document if not the owner
     *    Request: { "auth": { "uid": "user456" }, "method": "delete", "path": "/databases/(default)/documents/users/user123/vaults/vault456/credentials/cred789" }
     * @principle Enforces path-based ownership to secure credentials.
     */
    match /users/{userId}/vaults/{vaultId}/credentials/{credentialId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.vaultId == vaultId;
      allow update: if isExistingOwner(userId) && request.resource.data.vaultId == resource.data.vaultId;
      allow delete: if isExistingOwner(userId);
    }
  }
}