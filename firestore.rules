/**
 * @fileoverview Firestore Security Rules for CipherVault.
 *
 * This ruleset enforces a strict user-ownership model. All data (users, vaults, and credentials)
 * is nested under `/users/{userId}`, ensuring that only the authenticated user can access their own data.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information.
 * - `/users/{userId}/vaults/{vaultId}`: Stores password vaults for each user.
 * - `/users/{userId}/vaults/{vaultId}/credentials/{credentialId}`: Stores individual credentials within each vault.
 *
 * Key Security Decisions:
 * - Strict Ownership: All write operations are restricted to the owning user, enforced via `isOwner(userId)`.
 * - Path-Based Authorization: The hierarchical data structure allows for simple, efficient security rules based on the document path.
 * - No User Listing: Listing all users is not permitted.
 * - Denormalization: Documents MUST contain the necessary `userId` or `vaultId` fields to validate ownership on creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Verifies user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-based ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the document exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Prevents modification of non-existent documents.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Manages user profile data. Only the authenticated user can read, create, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (get, list) User 'user123' can read their own profile.
     * @allow (create) User 'user123' can create their profile if request.auth.uid == userId.
     * @allow (update, delete) User 'user123' can update or delete their own profile.
     * @deny (get, list) User 'user456' cannot read User 'user123' profile.
     * @deny (create) User 'user123' cannot create User 'user456' profile.
     * @deny (update, delete) User 'user456' cannot update or delete User 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user's password vaults. Only the authenticated user can read, create, update, or delete their own vaults.
     * @path /users/{userId}/vaults/{vaultId}
     * @allow (get, list) User 'user123' can read their own vaults.
     * @allow (create) User 'user123' can create a vault if request.auth.uid == userId and request.resource.data.userId == userId.
     * @allow (update, delete) User 'user123' can update or delete their own vaults.
     * @deny (get, list) User 'user456' cannot read User 'user123' vaults.
     * @deny (create) User 'user123' cannot create a vault under User 'user456'.
     * @deny (update, delete) User 'user456' cannot update or delete User 'user123' vaults.
     * @principle Enforces document ownership for all operations on vaults.
     */
    match /users/{userId}/vaults/{vaultId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages credentials within a user's vault. Only the authenticated user can read, create, update, or delete credentials in their vaults.
     * @path /users/{userId}/vaults/{vaultId}/credentials/{credentialId}
     * @allow (read) User 'user123' can read credentials in their own vaults.
     * @allow (create) User 'user123' can create a credential in their vault if request.resource.data.vaultId == vaultId.
     * @allow (update) User 'user123' can update a credential in their vault if request.resource.data.vaultId == resource.data.vaultId.
     * @allow (delete) User 'user123' can delete credentials in their own vaults.
     * @deny (read) User 'user456' cannot read credentials in User 'user123' vaults.
     * @deny (create) User 'user123' cannot create a credential in a vault they don't own.
     * @deny (update) User 'user123' cannot update a credential and move it to a different vault.
     * @deny (delete) User 'user456' cannot delete credentials in User 'user123' vaults.
     * @principle Enforces document ownership and vault consistency for all credential operations.
     */
    match /users/{userId}/vaults/{vaultId}/credentials/{credentialId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.vaultId == vaultId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.vaultId == resource.data.vaultId;
      allow delete: if isExistingOwner(userId);
    }
  }
}