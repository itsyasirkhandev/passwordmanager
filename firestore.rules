/**
 * @file Firebase Security Rules for CipherVault
 * @version Prototyping Mode - Data shape is not strictly validated.
 *
 * @description This ruleset enforces a strict user-ownership model for all data within the CipherVault application.
 * All data is nested under /users/{userId}, ensuring that only the authenticated user can access their own vaults and credentials.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/vaults/{vaultId}: Stores individual password vaults for each user.
 * - /users/{userId}/vaults/{vaultId}/credentials/{credentialId}: Stores individual credentials within a vault.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require authentication and ownership validation.
 * - Data validation is minimal in this prototyping phase, focusing on ownership and relational integrity.
 * - The ruleset defaults to a secure-by-default posture, explicitly denying access unless specifically allowed.
 *
 * Denormalization for Authorization:
 * - The data model utilizes path-based ownership, eliminating the need for `get()` calls in security rules. The `userId` is directly embedded in the document path, making ownership checks simple and efficient.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @allow (get) Signed-in user gets their own profile.
     * @allow (list) Listing users is not allowed.
     * @allow (update) Signed-in user updates their own profile.
     * @allow (delete) Signed-in user deletes their own profile.
     * @deny (create) User attempts to create a profile for another user.
     * @deny (update) User attempts to update another user's profile.
     * @deny (delete) User attempts to delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the request is authenticated.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       // Helper function to check if the authenticated user is the owner of the resource AND the resource exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Read rules
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      // Write rules
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to user vaults.
     * @path /users/{userId}/vaults/{vaultId}
     * @allow (create) Signed-in user creates a vault under their profile.
     * @allow (get) Signed-in user gets a vault under their profile.
     * @allow (list) Signed-in user lists vaults under their profile.
     * @allow (update) Signed-in user updates a vault under their profile.
     * @allow (delete) Signed-in user deletes a vault under their profile.
     * @deny (create) User attempts to create a vault under another user's profile.
     * @deny (update) User attempts to update a vault under another user's profile.
     * @deny (delete) User attempts to delete a vault under another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/vaults/{vaultId} {
      // Read rules
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Write rules
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to user credentials.
     * @path /users/{userId}/vaults/{vaultId}/credentials/{credentialId}
     * @allow (create) Signed-in user creates a credential under their vault.
     * @allow (get) Signed-in user gets a credential under their vault.
     * @allow (list) Signed-in user lists credentials under their vault.
     * @allow (update) Signed-in user updates a credential under their vault.
     * @allow (delete) Signed-in user deletes a credential under their vault.
     * @deny (create) User attempts to create a credential under another user's vault.
     * @deny (update) User attempts to update a credential under another user's vault.
     * @deny (delete) User attempts to delete a credential under another user's vault.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/vaults/{vaultId}/credentials/{credentialId} {
      // Read rules
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Write rules
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}