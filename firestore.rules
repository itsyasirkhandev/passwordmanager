/**
 * @fileoverview Firestore Security Rules for CipherVault.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. All data is nested under
 * /users/{userId}, and only the authenticated user can access their own data.
 *
 * Data Structure:
 * The data model follows a hierarchical structure:
 * /users/{userId} - User profiles
 * /users/{userId}/vaults/{vaultId} - Password vaults owned by the user
 * /users/{userId}/vaults/{vaultId}/credentials/{credentialId} - Credentials within a vault
 *
 * Key Security Decisions:
 * - User listing is disallowed for other users, but a user can list to find their own document.
 * - Path-based ownership is strictly enforced. Every document is owned by the user whose ID is in the path.
 * - Data validation is relaxed to allow for rapid prototyping, focusing only on authorization-critical fields.
 * - User must pass their `userId` in both path and document `userId` field to prevent spoofing. This is only done during creation and cannot be changed after.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get) Authenticated user can get their own profile.
     * @allow (list) Authenticated user can list to find their own profile.
     * @allow (create) Authenticated user can create their own profile, with matching user ID in the path and document.
     * @allow (update) Authenticated user can update their profile, provided they own it and the user ID in the document is immutable.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Another user tries to get a profile.
     * @deny (create) Unauthenticated user tries to create a profile.
     * @deny (update) Another user tries to update the profile.
     * @deny (delete) Another user tries to delete the profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/vaults/{vaultId} collection.
     * @path /users/{userId}/vaults/{vaultId}
     * @allow (get) Authenticated user can get their own vault.
     * @allow (list) Authenticated user can list their own vaults.
     * @allow (create) Authenticated user can create their own vault, with matching user ID in the path and document.
     * @allow (update) Authenticated user can update their vault, provided they own it and the user ID in the document is immutable.
     * @allow (delete) Authenticated user can delete their own vault.
     * @deny (get) Another user tries to get a vault.
     * @deny (list) Another user tries to list the vaults.
     * @deny (create) Unauthenticated user tries to create a vault.
     * @deny (update) Another user tries to update the vault.
     * @deny (delete) Another user tries to delete the vault.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/vaults/{vaultId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/vaults/{vaultId}/credentials/{credentialId} collection.
     * @path /users/{userId}/vaults/{vaultId}/credentials/{credentialId}
     * @allow (get) Authenticated user can get their own credential.
     * @allow (list) Authenticated user can list their own credentials.
     * @allow (create) Authenticated user can create their own credential, with matching user ID in the path.
     * @allow (update) Authenticated user can update their credential.
     * @allow (delete) Authenticated user can delete their own credential.
     * @deny (get) Another user tries to get a credential.
     * @deny (list) Another user tries to list the credentials.
     * @deny (create) Unauthenticated user tries to create a credential.
     * @deny (update) Another user tries to update the credential.
     * @deny (delete) Another user tries to delete the credential.
     * @principle Enforces path-based ownership to secure credential data.
     */
    match /users/{userId}/vaults/{vaultId}/credentials/{credentialId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}